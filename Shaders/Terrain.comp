#version 460 core

layout (local_size_x = 16, local_size_y = 16) in;

struct Output{
    vec4 position;
    vec4 normal;
    uint biomeIDs[3];
    float biomeWeight[3];
};

layout (std430, binding = 0) buffer Buffer {
    Output outputs[];
};



struct Params {
    float fbmFreq;
    float fbmAmp;
    float ridgeFreq;
    float ridgeAmp;
    float voroFreq;
    float voroAmp;
    float morphedvoroFreq;
    float morphedvoroAmp;
    float sandFreq;
    float sandAmp;
    int enabled;
    int padding1, padding2, padding3;
};

layout (std140, binding = 2) uniform UniformBuffer {
    Params Dunes;
    Params Plains;
    Params Mountains;
    Params Sea;
} u;



// Uniformy pro řízení terénu
uniform int gridSize;
uniform float gridDx;
uniform uint octaves;  // Počet hladin šumu
uniform float persistence; // Jak moc se snižuje amplituda s další hladinou
uniform float lacunarity;  // Jak moc se zvyšuje frekvence s další hladinou
uniform float heightScale;   
uniform float edgeSharpness; //Voronoi
uniform float scale;
uniform uint seed;
/*uniform float perlinWeight = 0.0;
uniform float voronoiWeight = 1.0;
uniform float simplexWeight = 0.0;
uniform float ridgeWeight = 0.0;*/

//Pomocí kubické interpolace - 
// Funkce pro fade efekt - verze pro float
float fade(float t) {
    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);
}

// Přetížení funkce fade pro vec2
vec2 fade(vec2 t) {
    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);
}

// Lineární interpolace mezi dvěma hodnotami - "míchá 2 hodnoty podle váhy"
float lerp(float a, float b, float t) {
    return a + t * (b - a);
}

// Generování gradientu na základě hash hodnoty 
//Výběr náhodného směru gradientu pomocí h, generuje lokální variace, které se pak interpolují
float grad(int hash, float x, float y) {
    int h = hash & 7; //pouze spodní 3 bity
    float u = h < 4 ? x : y;
    float v = h < 2 ? y : x;
    return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);
}

// Simplex Noise 2D
vec2 grad2(int hash) {
    const vec2 G[8] = vec2[8](
        vec2(1,1), vec2(-1,1), vec2(1,-1), vec2(-1,-1),
        vec2(1,0), vec2(-1,0), vec2(0,1), vec2(0,-1)
    );
    return G[hash & 7];
}

// Hashovací funkce pro pseudonáhodné hodnoty - není potřeba tabulka permutací
int hash(int x, int y) {
    x = (x + int(seed)) ^ (x << 13);
    y = (y + int(seed)) ^ (y << 17);
    return ((x * y * 15731 + 789221) ^ (x + y * 1376312589)) & 1023;
}


uint idk_hash(vec2 pos) {
    return uint(fract(sin(dot(pos, vec2(12.9898, 78.233))) * 43758.5453) * 1000000);
}

// Výpočet Perlinova šumu
//Najdeme čtvercovou buňku do které bod patří, získáme relativní pozice uvnitř buňky
//fade() na hladší přechody
//4 hash hodnoty a spočítáme gradientové vlivy na rohy
//interpolujeme hodnoty mezi rohy pomocí lerp()
//vrátíme výslednou výšku
float perlinNoise(vec2 pos) {
    ivec2 cell = ivec2(floor(pos));
    vec2 localPos = fract(pos);

    vec2 fadeXY = fade(localPos);

    int h00 = hash(cell.x, cell.y);
    int h10 = hash(cell.x + 1, cell.y);
    int h01 = hash(cell.x, cell.y + 1);
    int h11 = hash(cell.x + 1, cell.y + 1);

    float n00 = grad(h00, localPos.x, localPos.y);
    float n10 = grad(h10, localPos.x - 1.0, localPos.y);
    float n01 = grad(h01, localPos.x, localPos.y - 1.0);
    float n11 = grad(h11, localPos.x - 1.0, localPos.y - 1.0);

    float nx0 = lerp(n00, n10, fadeXY.x);
    float nx1 = lerp(n01, n11, fadeXY.x);
    return lerp(nx0, nx1, fadeXY.y);
}

// Fractal Brownian Motion (kombinace více hladin Perlin Noise)
float fbm(vec2 pos) {
    float total = 0.0;
    float amplitude = 1.0;
    float frequency = 0.5;
    float maxValue = 0.0;

    for (int i = 0; i < octaves; i++) {
        total += perlinNoise(pos * frequency) * amplitude;
        maxValue += amplitude;
        amplitude *= persistence;  // Snižujeme sílu šumu
        frequency *= lacunarity;   // Zvyšujeme frekvenci
    }

    return total / maxValue; // Normalizace
}

float simplexNoise(vec2 v) {
    const float F2 = 0.36602540378; // (sqrt(3)-1)/2
    const float G2 = 0.2113248654;  // (3-sqrt(3))/6

    vec2 i = floor(v + dot(v, vec2(F2, F2)));
    vec2 x0 = v - (i - dot(i, vec2(G2, G2)));

    vec2 i1 = (x0.x > x0.y) ? vec2(1, 0) : vec2(0, 1);
    vec2 x1 = x0 - i1 + vec2(G2, G2);
    vec2 x2 = x0 - vec2(1.0, 1.0) + vec2(2.0 * G2, 2.0 * G2);

    int h0 = hash(int(i.x), int(i.y));
    int h1 = hash(int(i.x + i1.x), int(i.y + i1.y));
    int h2 = hash(int(i.x + 1), int(i.y + 1));

    vec2 g0 = grad2(h0);
    vec2 g1 = grad2(h1);
    vec2 g2 = grad2(h2);

    float t0 = max(0.5 - dot(x0, x0), 0.0);
    float t1 = max(0.5 - dot(x1, x1), 0.0);
    float t2 = max(0.5 - dot(x2, x2), 0.0);

    t0 *= t0; t0 *= t0;
    t1 *= t1; t1 *= t1;
    t2 *= t2; t2 *= t2;

    return 70.0 * (t0 * dot(g0, x0) + t1 * dot(g1, x1) + t2 * dot(g2, x2));
}
//Brownian Method pro Simplex Noise
float fbm2(vec2 pos) {
    float total = 0.0;
    float amplitude = 1.0;
    float frequency = 0.5;
    float maxValue = 0.0; 

    for (int i = 0; i < octaves; i++) {
        total += simplexNoise(pos * frequency) * amplitude;
        maxValue += amplitude;
        amplitude *= persistence;  
        frequency *= lacunarity;  
    }

    float result = total / maxValue; // Normalizace do rozsahu [-1,1]
    return result * 0.5 + 0.5; // Posun z rozsahu [-1,1] do [0,1]
}

vec2 hash(vec2 p) {
    vec2 offsetA = vec2(127.1, 311.7) + seed;
    vec2 offsetB = vec2(269.5, 183.3) + seed * 2.0;

    return fract(sin(vec2(
        dot(p, offsetA),
        dot(p, offsetB)
    )) * 43758.5453);
}


float voronoiNoise(vec2 pos, float edgeSharpness, float baseScale) {
    pos /= baseScale;
    vec2 pixel_cell = floor(pos);

    vec3 first_min = vec3(1000);
    vec3 second_min = vec3(1000);
    vec3 third_min = vec3(1000);
    
    vec3 poses[9];
    
    for (int j = -1; j <= 1; j++) {
        for (int i = -1; i <= 1; i++) {
            vec2 cell = vec2(float(i), float(j)) + pixel_cell;
            vec2 posOffset = cell + hash(cell);
            vec2 off = posOffset - pos;
            float dist = dot(off, off);

            int idx = 3 * (j + 1) + (i + 1);
            poses[idx] = vec3(posOffset, dist);
        }
    }

    // Hledání tří nejbližších bodů
    for (int i = 0; i < 9; i++) {
        vec3 posd = poses[i];
        if (posd.z < first_min.z) first_min = posd;
    }
    for (int i = 0; i < 9; i++) {
        vec3 posd = poses[i];
        if (first_min.z < posd.z && posd.z < second_min.z) second_min = posd;
    }
    for (int i = 0; i < 9; i++) {
        vec3 posd = poses[i];
        if (second_min.z < posd.z && posd.z < third_min.z) third_min = posd;
    }

    // Výpočet váženého blendování pomocí exponenční funkce
    float sharpness = edgeSharpness;
    float b1 = exp2(-sharpness * first_min.z);
    float b2 = exp2(-sharpness * second_min.z);
    float b3 = exp2(-sharpness * third_min.z);

    vec2 id1 = hash(floor(first_min.xy));
    vec2 id2 = hash(floor(second_min.xy));
    vec2 id3 = hash(floor(third_min.xy));

    vec2 id_blend = (id1 * b1 + id2 * b2 + id3 * b3) / (b1 + b2 + b3);

    return id_blend.x;
}

void voronoiMap(in vec2 pos, float edgeSharpness, float scale, out vec3 first_min, out vec3 second_min, out vec3 third_min, out vec3 weights) {
    pos /= scale;
    vec2 pixel_cell = floor(pos);
    vec3 poses[9];

    // Naplnění pole sousedních buněk
    for (int j = -1; j <= 1; j++) {
        for (int i = -1; i <= 1; i++) {
            vec2 cell = vec2(float(i), float(j)) + pixel_cell;
            vec2 posOffset = cell + hash(cell);
            vec2 off = posOffset - pos;
            float dist = dot(off, off);
            int idx = 3 * (j + 1) + (i + 1);
            poses[idx] = vec3(posOffset, dist);
        }
    }

    // Inicializace tří nejbližších buněk
    first_min = vec3(1000);
    second_min = vec3(1000);
    third_min = vec3(1000);

    // Hledání první nejbližší buňky
    for (int i = 0; i < 9; i++) {
        if (poses[i].z < first_min.z) first_min = poses[i];
    }
    // Hledání druhé nejbližší buňky
    for (int i = 0; i < 9; i++) {
        if (first_min.z < poses[i].z && poses[i].z < second_min.z) second_min = poses[i];
    }
    // Hledání třetí nejbližší buňky
    for (int i = 0; i < 9; i++) {
        if (second_min.z < poses[i].z && poses[i].z < third_min.z) third_min = poses[i];
    }

    // Výpočet vážených koeficientů pro hladký přechod
    float b1 = exp2(-edgeSharpness * first_min.z);
    float b2 = exp2(-edgeSharpness * second_min.z);
    float b3 = exp2(-edgeSharpness * third_min.z);

    weights = vec3(b1, b2, b3) / (b1 + b2 + b3); // Normalizace vah
}



float sandDunes(vec2 pos,float edge, float baseScale) {
    pos /= (baseScale / 3);
    vec2 cell = floor(pos);
    vec2 localPos = fract(pos);

    float minDist = 10.0;

    for (int y = -1; y <= 1; y++) {
        for (int x = -1; x <= 1; x++) {
            vec2 neighborCell = cell + vec2(x, y);
            vec2 point = neighborCell + vec2(
                fract(sin(dot(neighborCell, vec2(127.1, 311.7))) * 43758.5453),
                fract(sin(dot(neighborCell, vec2(269.5, 183.3))) * 43758.5453)
            );

            minDist = min(minDist, length(point - (cell + localPos)));
        }
    }
    return minDist;
}

float plainsTerrain(vec2 pos) {
    return fbm(pos * 0.4) * 0.7;
}


float ridgeNoise(vec2 pos, float scale) {
    float value = fbm2(pos / 5.0) * 2.0 -1.0; // Snížení frekvence pro větší tvary
    value = 1.0 - abs(value); // Inverze pro ostré vrcholy
    value *= value; // Zesílení efektu hřebenů
    return value;
}
//Noise pro hory
float moreNoise(vec2 pos) {
    float voro = voronoiNoise(pos * 0.4, edgeSharpness * 0.4, scale * 1.5);

    vec2 warp = vec2(fbm(pos), fbm(pos + vec2(4.3, 2.1))) * 2.0;
    
    float distortion = fbm(pos * 1.5) * 0.5;
    
    float morphedVoro = voronoiNoise(pos + warp + distortion, edgeSharpness * 0.6, scale * 1.2);
    
    float ridges = ridgeNoise(pos, scale * 2) * 0.4;
    
    return mix(voro, morphedVoro, 0.8) + ridges;
}

float combinedNoise(vec2 pos, Params params) {
    float combined = 0.0;

    combined += fbm(pos * params.fbmFreq) * params.fbmAmp;

    // Voronoi základní noise
    combined += voronoiNoise(pos * params.voroFreq, edgeSharpness * 0.4, scale * 1.5) * params.voroAmp * 0.8;
    
    // Warping
    vec2 warp = vec2(fbm(pos), fbm(pos + vec2(4.3, 2.1))) * 2.0;

    // Distortion
    float distortion = fbm(pos * 1.0) * 0.5;

    // Morphed Voronoi noise
    combined += voronoiNoise(pos * params.morphedvoroFreq + warp + distortion, edgeSharpness * 0.6, scale * 1.2) * params.morphedvoroAmp * 0.2;

    // Ridge noise
    combined += ridgeNoise(pos * params.ridgeFreq, scale * 2) * params.ridgeAmp;

    // Sand dunes
    combined += sandDunes(pos * params.sandFreq, edgeSharpness, scale) * params.sandAmp;

    return combined;
}

float getHeight(float x, float y, out uint[3] biomeID, out vec3 weights) {
    vec2 pos = vec2(x, y) * 0.1;

    vec3 cells[3];
    weights = vec3(0.0, 0.0, 0.0);
    voronoiMap(pos, edgeSharpness, scale, cells[0], cells[1], cells[2], weights);

    float seaLevel = 0.0;
    float heights[3];

    Params activeBiomes[5];
    uint activeBiomeIDs[5];
    uint biomeCount = 0;

    if (u.Sea.enabled == 1) {
        activeBiomes[biomeCount] = u.Sea;
        activeBiomeIDs[biomeCount++] = 0;
    }
    if (u.Plains.enabled == 1) {
        activeBiomes[biomeCount] = u.Plains;
        activeBiomeIDs[biomeCount++] = 1;
    }
    if (u.Mountains.enabled == 1) {
        activeBiomes[biomeCount] = u.Mountains;
        activeBiomeIDs[biomeCount++] = 2;
    }
    if (u.Dunes.enabled == 1) { 
        activeBiomes[biomeCount] = u.Dunes;
        activeBiomeIDs[biomeCount++] = 3;
    }
    // Pokud žádný biom není povolený, vygeneruje se Sea
    if (biomeCount == 0) {
        activeBiomes[0] = u.Sea;
        activeBiomeIDs[0] = 0;
        biomeCount = 1;
    }

    for (int i = 0; i < 3; i++) {
        uint biomeHash = idk_hash(cells[i].xy);
        uint selectedBiome = biomeHash % biomeCount;
        biomeID[i] = activeBiomeIDs[selectedBiome];
        heights[i] = combinedNoise(pos, activeBiomes[selectedBiome]);

        if (biomeID[i] == 0) {
            heights[i] = seaLevel;
        }
    }

    float finalHeight = heights[0] * weights.x +
                        heights[1] * weights.y +
                        heights[2] * weights.z;

    return finalHeight * heightScale;
}


// Výpočet normály kombinací gradientového přístupu a detailního šumu
vec3 computeNormal(float x, float z) {
    float offset = 0.1 * scale; // Posun pro vzorkování sousedních bodů
    uint[3] biomeID;
    vec3 nothing;
    // Výška v sousedních bodech
    float hL = getHeight(x - offset, z, biomeID, nothing);
    float hR = getHeight(x + offset, z, biomeID, nothing);
    float hD = getHeight(x, z - offset, biomeID, nothing);
    float hU = getHeight(x, z + offset, biomeID, nothing);

    // Výpočet základní normály pomocí křížového součinu
    return normalize(vec3(hL - hR, 1.0, hD - hU));
}

void main() {
    uint x = gl_GlobalInvocationID.x;
    uint y = gl_GlobalInvocationID.y;
    Output results;
    if (x >= gridSize || y >= gridSize) return;
    uint[3] biomeID;
    vec3 weights;
    uint index = y * gridSize + x;
    float worldX = (float(x) - float(gridSize) / 2.0) * gridDx;
    float worldZ = (float(y) - float(gridSize) / 2.0) * gridDx;
    float worldY = getHeight(worldX, worldZ, biomeID, weights);

    results.position = vec4(worldX, worldY, worldZ, 1.0);
    results.normal = vec4(computeNormal(worldX, worldZ),0.0);

    results.biomeIDs[0] = biomeID[0];
    results.biomeIDs[1] = biomeID[1];
    results.biomeIDs[2] = biomeID[2];
    results.biomeWeight[0] = weights[0];
    results.biomeWeight[1] = weights[1];
    results.biomeWeight[2] = weights[2];
    outputs[index] = results;
}